name: Build and Release on Tag

on:
  push:
    tags:
      - 'v*'
env:
  PROJECTS: 'CatMessenger.Matrix,CatMessenger.Telegram'
  OS: 'linux'
  ARCHS: 'amd64,arm64'

jobs:
  set-env-vars:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - id: set-matrix
        run: |
          projects=(${PROJECTS//,/ })
          os=(${OS//,/ })
          arch=(${ARCHS//,/ })
          matrix=$(jq -n \
          --arg projects "${PROJECTS}" \
          --arg os "${OS}" \
          --arg arch "${ARCHS}" \
          '{
            include: (
              $projects | split(",") as $projects |
              $os | split(",") as $os |
              $arch | split(",") as $arch |
              [ $projects[], $os[], $arch[] ] | 
              combinations | 
              map({project: .[0], os: .[1], arch: .[2]})
            )
          }')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-and-publish:
    needs: set-env-vars
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.set-env-vars.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./${{ matrix.project }}/${{ matrix.project }}.csproj

      - name: Build project
        run: dotnet publish ./${{ matrix.project }}/${{ matrix.project }}.csproj -c Release -r ${{ matrix.os }}-${{ matrix.arch }} -p:PublishSingleFile=true -o public/${{ matrix.os }}-${{ matrix.arch }}

      - name: Tar build artifacts
        run: tar -czf ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C public/${{ matrix.os }}-${{ matrix.arch }} .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build-and-publish
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.set-env-vars.outputs.matrix) }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
