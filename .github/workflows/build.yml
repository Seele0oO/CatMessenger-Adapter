name: Build and Release on Tag

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # project: [CatMessenger.Matrix, CatMessenger.Telegram]
        project: [CatMessenger.Telegram]
        os: [linux]
        arch: [amd64, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./${{ matrix.project }}/${{ matrix.project }}.csproj

      - name: Build project
        run: dotnet publish ./${{ matrix.project }}/${{ matrix.project }}.csproj -c Release -r ${{ matrix.os }}-${{ matrix.arch }} -p:PublishSingleFile=true -o public/${{ matrix.os }}-${{ matrix.arch }}

  create_release_and_upload:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        project: [CatMessenger.Matrix, CatMessenger.Telegram]
        os: [linux]
        arch: [amd64, arm64]

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Tar build artifacts
        run: tar -czf ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C public/${{ matrix.os }}-${{ matrix.arch }} .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_name: ${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip
